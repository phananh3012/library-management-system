package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PatronAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatronAccountAllPropertiesEquals(PatronAccount expected, PatronAccount actual) {
        assertPatronAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertPatronAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatronAccountAllUpdatablePropertiesEquals(PatronAccount expected, PatronAccount actual) {
        assertPatronAccountUpdatableFieldsEquals(expected, actual);
        assertPatronAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatronAccountAutoGeneratedPropertiesEquals(PatronAccount expected, PatronAccount actual) {
        assertThat(expected)
            .as("Verify PatronAccount auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatronAccountUpdatableFieldsEquals(PatronAccount expected, PatronAccount actual) {
        assertThat(expected)
            .as("Verify PatronAccount relevant properties")
            .satisfies(e -> assertThat(e.getCardNumber()).as("check cardNumber").isEqualTo(actual.getCardNumber()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getSurname()).as("check surname").isEqualTo(actual.getSurname()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatronAccountUpdatableRelationshipsEquals(PatronAccount expected, PatronAccount actual) {
        assertThat(expected)
            .as("Verify PatronAccount relationships")
            .satisfies(e -> assertThat(e.getBooks()).as("check books").isEqualTo(actual.getBooks()));
    }
}
