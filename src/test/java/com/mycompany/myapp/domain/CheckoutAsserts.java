package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CheckoutAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckoutAllPropertiesEquals(Checkout expected, Checkout actual) {
        assertCheckoutAutoGeneratedPropertiesEquals(expected, actual);
        assertCheckoutAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckoutAllUpdatablePropertiesEquals(Checkout expected, Checkout actual) {
        assertCheckoutUpdatableFieldsEquals(expected, actual);
        assertCheckoutUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckoutAutoGeneratedPropertiesEquals(Checkout expected, Checkout actual) {
        assertThat(expected)
            .as("Verify Checkout auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckoutUpdatableFieldsEquals(Checkout expected, Checkout actual) {
        assertThat(expected)
            .as("Verify Checkout relevant properties")
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getEndTime()).as("check endTime").isEqualTo(actual.getEndTime()))
            .satisfies(e -> assertThat(e.getIsReturned()).as("check isReturned").isEqualTo(actual.getIsReturned()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckoutUpdatableRelationshipsEquals(Checkout expected, Checkout actual) {
        assertThat(expected)
            .as("Verify Checkout relationships")
            .satisfies(e -> assertThat(e.getBookCopy()).as("check bookCopy").isEqualTo(actual.getBookCopy()))
            .satisfies(e -> assertThat(e.getPatronAccount()).as("check patronAccount").isEqualTo(actual.getPatronAccount()));
    }
}
